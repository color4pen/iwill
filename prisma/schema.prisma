generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(cuid())
  lineId         String             @unique
  email          String?            @unique
  name           String?
  image          String?
  provider       String             @default("line")
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  role           Role               @default(USER)
  inquiryThreads InquiryThread[]
  media          Media[]
  notifications  NotificationRead[]

  @@index([lineId])
  @@index([role])
}

model Notification {
  id          String                @id @default(cuid())
  title       String
  content     String
  category    NotificationCategory?
  priority    Priority              @default(NORMAL)
  publishedAt DateTime              @default(now())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  reads       NotificationRead[]

  @@index([publishedAt])
  @@index([category])
}

model NotificationRead {
  userId         String
  notificationId String
  readAt         DateTime     @default(now())
  id             String       @id @default(cuid())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
  @@index([userId])
  @@index([notificationId])
}

model Media {
  id               String          @id @default(cuid())
  userId           String
  fileUrl          String
  thumbnailUrl     String?
  caption          String?
  isApproved       Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  fileName         String
  fileSize         Int
  mimeType         String
  approvedAt       DateTime?
  approvedBy       String?
  mediaSituationId String?
  mediaSituation   MediaSituation? @relation(fields: [mediaSituationId], references: [id])
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isApproved])
  @@index([createdAt])
  @@index([mediaSituationId])
}

model MediaSituation {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  media       Media[]

  @@index([order])
}

model Schedule {
  id          String    @id @default(cuid())
  time        String
  description String?
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  colorBg     String    @default("bg-gray-100")
  colorText   String    @default("text-gray-600")
  icon        String?
  isActive    Boolean   @default(true)
  title       String
  date        DateTime?

  @@index([date, time, order])
  @@index([isActive])
}

model FAQ {
  id        String      @id @default(cuid())
  question  String
  answer    String
  category  FAQCategory
  order     Int
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([category, order])
  @@index([isActive])
}

model Invitation {
  id        String    @id @default(cuid())
  token     String    @unique @default(cuid())
  email     String?
  name      String?
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  usedBy    String?
  expiresAt DateTime?
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([token])
  @@index([isUsed])
}

model InquiryThread {
  id        String           @id @default(cuid())
  userId    String
  title     String
  category  InquiryCategory
  status    InquiryStatus    @default(OPEN)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  messages  InquiryMessage[]
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model InquiryMessage {
  id         String            @id @default(cuid())
  threadId   String
  content    String
  senderRole MessageSenderRole
  isRead     Boolean           @default(false)
  createdAt  DateTime          @default(now())
  senderId   String
  senderName String
  readAt     DateTime?
  thread     InquiryThread     @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
}

enum NotificationCategory {
  GENERAL
  SCHEDULE
  VENUE
  IMPORTANT
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum FAQCategory {
  GENERAL
  VENUE
  GIFT
  ATTENDANCE
  MEDIA
}

enum MessageSenderRole {
  USER
  ADMIN
}

enum InquiryCategory {
  GENERAL
  ATTENDANCE
  VENUE
  GIFT
  OTHER
}

enum InquiryStatus {
  OPEN
  RESOLVED
  CLOSED
}
