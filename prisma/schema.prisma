// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for NextAuth with LINE provider
model User {
  id            String    @id @default(cuid())
  lineId        String    @unique
  email         String?   @unique
  name          String?
  image         String?
  provider      String    @default("line")
  role          Role      @default(USER)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  notifications NotificationRead[]
  media         Media[]
  inquiryThreads InquiryThread[]
  
  @@index([lineId])
  @@index([role])
}

enum Role {
  USER
  ADMIN
}

// お知らせ
model Notification {
  id           String    @id @default(cuid())
  title        String
  content      String    @db.Text
  category     NotificationCategory?
  priority     Priority  @default(NORMAL)
  publishedAt  DateTime  @default(now())
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  reads        NotificationRead[]
  
  @@index([publishedAt])
  @@index([category])
}

enum NotificationCategory {
  GENERAL      // 一般
  SCHEDULE     // スケジュール
  VENUE        // 会場
  IMPORTANT    // 重要
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// お知らせ既読管理
model NotificationRead {
  id              String       @id @default(cuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationId  String
  notification    Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  readAt          DateTime     @default(now())
  
  @@unique([userId, notificationId])
  @@index([userId])
  @@index([notificationId])
}

// メディア（写真・動画）
model Media {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  fileUrl     String
  thumbnailUrl String?
  fileName    String
  fileSize    Int       // バイト単位
  mimeType    String
  
  caption     String?
  mediaSituationId String?   // メディアシチュエーションマスタへの外部キー
  mediaSituation   MediaSituation? @relation(fields: [mediaSituationId], references: [id], onDelete: SetNull)
  
  isApproved  Boolean   @default(false)
  approvedAt  DateTime?
  approvedBy  String?   // 管理者のID
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([userId])
  @@index([isApproved])
  @@index([createdAt])
  @@index([mediaSituationId])
}

// メディアシチュエーションマスタ
model MediaSituation {
  id          String    @id @default(cuid())
  name        String    // 例: 挙式、披露宴、二次会、受付、歓談
  description String?   // 説明
  order       Int       // 表示順
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  media       Media[]   // このシチュエーションに属するメディア
  
  @@index([order])
}

// スケジュール
model Schedule {
  id          String    @id @default(cuid())
  time        String    // "14:30" のような形式
  title       String    // イベント名
  description String?
  icon        String?   // アイコン名（例: "Users", "Church", "Utensils"）
  colorBg     String    @default("bg-gray-100") // 背景色クラス
  colorText   String    @default("text-gray-600") // テキスト色クラス
  order       Int       // 表示順
  isActive    Boolean   @default(true)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([order])
  @@index([isActive])
}

// よくある質問
model FAQ {
  id        String      @id @default(cuid())
  question  String
  answer    String      @db.Text
  category  FAQCategory
  order     Int         // 表示順
  isActive  Boolean     @default(true)
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  @@index([category, order])
  @@index([isActive])
}

enum FAQCategory {
  GENERAL      // 一般
  VENUE        // 会場・受付
  GIFT         // ご祝儀・ギフト
  ATTENDANCE   // 出席情報
  MEDIA        // メディア
}

// 招待URL管理
model Invitation {
  id          String    @id @default(cuid())
  token       String    @unique @default(cuid())
  email       String?   // 特定のメールアドレス用（オプション）
  name        String?   // 招待者の名前（オプション）
  
  isUsed      Boolean   @default(false)
  usedAt      DateTime?
  usedBy      String?   // ユーザーID
  
  expiresAt   DateTime? // 有効期限（オプション）
  notes       String?   // 管理者用メモ
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([token])
  @@index([isUsed])
}

// 問い合わせスレッド
model InquiryThread {
  id          String        @id @default(cuid())
  
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  
  title       String        // タイトル
  category    InquiryCategory
  status      InquiryStatus @default(OPEN)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  messages    InquiryMessage[]
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// 問い合わせメッセージ
model InquiryMessage {
  id          String        @id @default(cuid())
  
  thread      InquiryThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId    String
  
  // 送信者情報（ユーザーまたは管理者）
  senderId    String
  senderName  String
  senderRole  MessageSenderRole
  
  content     String        @db.Text
  
  isRead      Boolean       @default(false) // 受信者が読んだか
  readAt      DateTime?
  
  createdAt   DateTime      @default(now())
  
  @@index([threadId])
  @@index([createdAt])
}

enum MessageSenderRole {
  USER        // 一般ユーザー
  ADMIN       // 管理者
}

enum InquiryCategory {
  GENERAL     // 一般的な質問
  ATTENDANCE  // 出欠について
  VENUE       // 会場について
  GIFT        // ご祝儀・ギフトについて
  OTHER       // その他
}

enum InquiryStatus {
  OPEN        // 対応中
  RESOLVED    // 解決済み
  CLOSED      // クローズ
}